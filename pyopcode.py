# Opcode [00h] STOP_CODE
# it's use in assembly code results in: 
# SystemError: unknown opcode


# Opcode [01h] POP_TOP
(lambda:1)()


# Opcode [02h] ROT_TWO
a = 1; b = 2
(a, b) = (b, a)


# Opcode [03h] ROT_THREE
a = 1
(a, a, a) = (a, a, a)


# Opcode [04h] DUP_TOP
{'a':1}


# Opcode [05h] ROT_FOUR
x = range(6)
x[2:4] += 'abc'


# Opcode [09h] NOP
# not generated by compiler or removed after optimizations


# Opcode [0Ah] UNARY_POSITIVE
a = 1
a = +a


# Opcode [0Bh] UNARY_NEGATIVE
a = 1
a = -a


# Opcode [0Ch] UNARY_NOT
a = 1
a = not a


# Opcode [0Dh] UNARY_CONVERT
a = 1
a = `a`


# Opcode [0Fh] UNARY_INVERT
a = 1
a = ~a


# Opcode [12h] LIST_APPEND
a = [i*i for i in (1,2)]


# Opcode [13h] BINARY_POWER
a = 2
a = a ** 2


# Opcode [14h] BINARY_MULTIPLY
a = 2
a = a * 2


# Opcode [15h] BINARY_DIVIDE
a = 2
a = a / 2


# Opcode [16h] BINARY_MODULO
a = 2
a = a % 2


# Opcode [17h] BINARY_ADD
a = 2
a = a + 2


# Opcode [18h] BINARY_SUBTRACT
a = 2
a = a - 2


# Opcode [19h] BINARY_SUBSCR
a = [1]
a[0]


# Opcode [1Ah] BINARY_FLOOR_DIVIDE
a = 2
a = a // 2


# Opcode [1Bh] BINARY_TRUE_DIVIDE
from __future__ import division
a = 2
a = a / 2


# Opcode [1Ch] INPLACE_FLOOR_DIVIDE
a = 1
a //= 1


# Opcode [1Dh] INPLACE_TRUE_DIVIDE
from __future__ import division
a = 1
a /= 2


# Opcode [1Eh] SLICE
a = [1,2,3]
a = a[:]


# Opcode [1Fh] SLICE+1
a = [1,2,3]
a = a[1:]


# Opcode [20h] SLICE+2
a = [1,2,3]
a = a[:2]


# Opcode [21h] SLICE+3
a = [1,2,3]
a = a[1:2]


# Opcode [28h] STORE_SLICE
a = [1,2,3]
a[:] = [1,2,3]


# Opcode [29h] STORE_SLICE+1
a = [1,2,3]
a[1:] = [2,3]


# Opcode [2Ah] STORE_SLICE+2
a = [1,2,3]
a[:2] = [1,2]


# Opcode [2Bh] STORE_SLICE+3
a = [1,2,3]
a[1:2] = [2]


# Opcode [32h] DELETE_SLICE
a = [1,2,3]
del a[:]


# Opcode [33h] DELETE_SLICE+1
a = [1,2,3]
del a[1:]


# Opcode [34h] DELETE_SLICE+2
a = [1,2,3]
del a[:2]


# Opcode [35h] DELETE_SLICE+3
a = [1,2,3]
del a[1:2]


# Opcode [37h] INPLACE_ADD
a = 1
a += 1


# Opcode [38h] INPLACE_SUBTRACT
a = 1
a -= 1


# Opcode [39h] INPLACE_MULTIPLY
a = 1
a *= 1


# Opcode [3Ah] INPLACE_DIVIDE
a = 1
a /= 1


# Opcode [3Bh] INPLACE_MODULO
a = 1
a %= 1


# Opcode [3Ch] STORE_SUBSCR
a = []
a[0] = 1


# Opcode [3Dh] DELETE_SUBSCR
a = [1]
del a[0]


# Opcode [3Eh] BINARY_LSHIFT
a = 1
a = a << 1


# Opcode [3Fh] BINARY_RSHIFT
a = 1
a = a >> 1


# Opcode [40h] BINARY_AND
a = 1
a = a & 1


# Opcode [41h] BINARY_XOR
a = 1
a = a ^ 1


# Opcode [42h] BINARY_OR
a = 1
a = a | 1


# Opcode [43h] INPLACE_POWER
a = 1
a **= 1


# Opcode [44h] GET_ITER
for a in (1,2): pass


# Opcode [46h] PRINT_EXPR
# used only in interactive mode


# Opcode [47h] PRINT_ITEM
print "hello world!"


# Opcode [48h] PRINT_NEWLINE
print


# Opcode [49h] PRINT_ITEM_TO
import sys
print >> sys.stdout, "hello world",


# Opcode [4Ah] PRINT_NEWLINE_TO
import sys
print >> sys.stdout


# Opcode [4Bh] INPLACE_LSHIFT
a = 1
a <<= 1


# Opcode [4Ch] INPLACE_RSHIFT
a = 1
a >>= 1


# Opcode [4Dh] INPLACE_AND
a = 1
a &= 1


# Opcode [4Eh] INPLACE_XOR
a = 1
a ^= 1


# Opcode [4Fh] INPLACE_OR
a = 1
a |= 1


# Opcode [50h] BREAK_LOOP
for a in (1,2): break


# Opcode [51h] WITH_CLEANUP
from __future__ import with_statement

with open("1.txt") as f:
        print f.read()


# Opcode [52h] LOAD_LOCALS
class a: pass


# Opcode [53h] RETURN_VALUE
# empty file


# Opcode [54h] IMPORT_STAR
from sys import *


# Opcode [55h] EXEC_STMT
exec("print 'hello world'", globals(), locals())


# Opcode [56h] YIELD_VALUE
def foo():
        print 'hello'
        yield 1
        print 'world'
        yield 2

a = foo()
print a.next()
print a.next()


# Opcode [57h] POP_BLOCK
for a in (1,2): break


# Opcode [58h] END_FINALLY
try:
        a = 1
except ValueError:
        a = 2
finally:
        a = 3


# Opcode [59h] BUILD_CLASS
class a: pass


# Opcode [5Ah] STORE_NAME
a = 1


# Opcode [5Bh] DELETE_NAME
a = 1
del a


# Opcode [5Ch] UNPACK_SEQUENCE
(a, b) = "ab"


# Opcode [5Dh] FOR_ITER
for i in (1,2): pass


# Opcode [5Fh] STORE_ATTR
import sys
sys.stderr = sys.stdout


# Opcode [60h] DELETE_ATTR
import sys
del sys.stderr


# Opcode [61h] STORE_GLOBAL
global a
a = 1


# Opcode [62h] DELETE_GLOBAL
global a
del a


# Opcode [63h] DUP_TOPX
a = 0
b = [0]
b[a] += 1


# Opcode [64h] LOAD_CONST
a = 1


# Opcode [65h] LOAD_NAME
a = 1
a = a


# Opcode [66h] BUILD_TUPLE
a = 1;
a = (a, a)


# Opcode [67h] BUILD_LIST
[1,2,3]


# Opcode [68h] BUILD_MAP
{"a":1,"b":2}


# Opcode [69h] LOAD_ATTR
[].sort()


# Opcode [6Ah] COMPARE_OP
a = 1 == 2


# Opcode [6Bh] IMPORT_NAME
import new


# Opcode [6Ch] IMPORT_FROM
from dis import opmap


# Opcode [6Eh] JUMP_FORWARD
if 1 == 2: pass
else: pass


# Opcode [6Fh] JUMP_IF_FALSE
if 1 == 2: pass
else: pass


# Opcode [70h] JUMP_IF_TRUE
if not(1 == 2): pass
else: pass


# Opcode [71h] JUMP_ABSOLUTE
for i in (1,2): pass


# Opcode [74h] LOAD_GLOBAL
global a
a = 1
a = a


# Opcode [77h] CONTINUE_LOOP
for x in (1,2):
        try: continue
        except: pass


# Opcode [78h] SETUP_LOOP
while 0 > 1: pass


# Opcode [79h] SETUP_EXCEPT
try:
        a = 1
except ValueError:
        a = 2
finally:
        a = 3


# Opcode [7Ah] SETUP_FINALLY
try:
        a = 1
except ValueError:
        a = 2
finally:
        a = 3


# Opcode [7Ch] LOAD_FAST
def f():
	a = 1
        a = a


# Opcode [7Dh] STORE_FAST
def f():
	a = 1
        a = a


# Opcode [7Eh] DELETE_FAST
def f():
        a = 1
        del a


# Opcode [82h] RAISE_VARARGS
raise ValueError


# Opcode [83h] CALL_FUNCTION
def f(): pass
f()


# Opcode [84h] MAKE_FUNCTION
def f(): pass


# Opcode [85h] BUILD_SLICE
a = [1,2,3,4]
b = a[::-1]


# Opcode [86h] MAKE_CLOSURE
def f():
        a = 1
        def g():
                return a + 1
        return g()

print f()


# Opcode [87h] LOAD_CLOSURE
def f():
        a = 1
        def g():
                return a + 1
        return g()

print f()


# Opcode [88h] LOAD_DEREF
def f():
        a = 1
        def g():
                return a + 1
        return g()

print f()


# Opcode [89h] STORE_DEREF
def f():
        a = 1
        def g():
                return a + 1
        return g()

print f()


# Opcode [8Ch] CALL_FUNCTION_VAR
def f(a,b): pass
a = (1,2)
f(*a)


# Opcode [8Dh] CALL_FUNCTION_KW
def f(a,b): pass
a = {"a":1,"b":2}
f(**a)


# Opcode [8Eh] CALL_FUNCTION_VAR_KW
def f(a,b,c): pass
a = {"b":1,"c":2}
b = (3,)
f(*b, **a)


# Opcode [8Fh] EXTENDED_ARG
a=(0,1,2,3, ... ,65535)

